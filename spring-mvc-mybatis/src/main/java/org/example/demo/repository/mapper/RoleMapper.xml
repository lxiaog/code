<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.demo.repository.dao.RoleMapper">
    <!--引用缓存，指定namespace和哪个名称空间的缓存一样-->
    <cache-ref namespace="org.example.demo.repository.dao.UserMapper"/>
    <resultMap id="BaseResultMap" type="org.example.demo.repository.entity.Role">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="role_name" jdbcType="VARCHAR" property="roleName"/>
        <result column="create_date" jdbcType="TIMESTAMP" property="createDate"/>
        <result column="update_date" jdbcType="TIMESTAMP" property="updateDate"/>
    </resultMap>
    <!--设置角色与关联表一对多关系-->
    <resultMap id="RoleCollectionPermissionsMap" type="org.example.demo.repository.entity.Role">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="role_name" jdbcType="VARCHAR" property="roleName"/>
        <result column="create_date" jdbcType="TIMESTAMP" property="createDate"/>
        <result column="update_date" jdbcType="TIMESTAMP" property="updateDate"/>
        <!--collection 必须使用ofType属性指定结果对象类型-->
        <collection property="joinPermissionRoles"
                    select="org.example.demo.repository.dao.JoinPermissionRoleMapper.queryListByRoleId"
                    column="id"
                    ofType="org.example.demo.repository.entity.JoinPermissionRole">
            <id column="role_id"  property="roleId"/>
            <result column="permission_id"  property="permissionId"/>
            <result column="id"  property="id"/>
            <result column="create_date"  property="createDate"/>
            <result column="update_date"  property="updateDate"/>
        </collection>
    </resultMap>

    <select id="queryRoleCollectionPermissions" parameterType="java.lang.Integer" resultMap="RoleCollectionPermissionsMap">
        select
        <include refid="Base_Column_List"/>
        from tbl_role
        where id = #{id,jdbcType=INTEGER}
    </select>

    <sql id="Base_Column_List">
    id, role_name, create_date, update_date
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from tbl_role
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tbl_role
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="org.example.demo.repository.entity.Role">
    insert into tbl_role (id, role_name, create_date, 
      update_date)
    values (#{id,jdbcType=INTEGER}, #{roleName,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP}, 
      #{updateDate,jdbcType=TIMESTAMP})
  </insert>
    <insert id="insertSelective" parameterType="org.example.demo.repository.entity.Role">
        insert into tbl_role
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="roleName != null">
                role_name,
            </if>
            <if test="createDate != null">
                create_date,
            </if>
            <if test="updateDate != null">
                update_date,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="roleName != null">
                #{roleName,jdbcType=VARCHAR},
            </if>
            <if test="createDate != null">
                #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateDate != null">
                #{updateDate,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="org.example.demo.repository.entity.Role">
        update tbl_role
        <set>
            <if test="roleName != null">
                role_name = #{roleName,jdbcType=VARCHAR},
            </if>
            <if test="createDate != null">
                create_date = #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateDate != null">
                update_date = #{updateDate,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="org.example.demo.repository.entity.Role">
    update tbl_role
    set role_name = #{roleName,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>